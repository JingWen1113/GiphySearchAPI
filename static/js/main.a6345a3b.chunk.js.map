{"version":3,"sources":["components/SearchBar.jsx","components/ShowGifs.jsx","components/SortOptions.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","setSearchTerm","onSearchTermSubmit","refreshTrending","searchTerm","handleChange","filterSelection","gifSize","className","style","marginTop","textAlign","placeholder","id","onChange","onKeyPress","event","key","width","onClick","marginLeft","boxShadow","outline","borderRadius","fontSize","ShowGifs","gifs","currentTerm","isLoading","onScrollEnd","fontWeight","backgroundColor","overflowY","height","onMouseUp","e","map","gif","embed_url","src","alt","border","title","SortOptions","value","API_KEY","App","state","gifSort","gifFilter","componentDidMount","a","storage","localStorage","getItem","setState","JSON","parse","size","axios","get","then","res","setItem","stringify","data","target","scrollHeight","scrollTop","clientHeight","newSize","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a6345a3b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst SearchBar = ({\r\n  setSearchTerm,\r\n  onSearchTermSubmit,\r\n  refreshTrending,\r\n  searchTerm,\r\n  handleChange,\r\n  filterSelection,\r\n  gifSize,\r\n}) => {\r\n  return (\r\n    <div\r\n      className=\"searchbar\"\r\n      style={{ marginTop: \"1vh\", textAlign: \"center\" }}\r\n    >\r\n      <input\r\n        placeholder=\"Search by keywords \"\r\n        id=\"searchTerm\"\r\n        onChange={setSearchTerm}\r\n        onKeyPress={event => {\r\n          if (event.key === 'Enter') {\r\n            onSearchTermSubmit(searchTerm, handleChange, 24)\r\n          }\r\n        }}\r\n        style={{ width: 300 }}\r\n      />\r\n      <br></br>\r\n      {searchTerm && handleChange && (\r\n        <button\r\n          className=\"btn-primary\"\r\n          onClick={() => onSearchTermSubmit(searchTerm, handleChange, 24)}\r\n          style={{\r\n            width: 50,\r\n            marginTop: 5,\r\n            marginLeft: 5,\r\n            boxShadow: \"none\",\r\n            outline: \"none\",\r\n            borderRadius: \"10px\",\r\n          }}\r\n        >\r\n          üîç\r\n        </button>\r\n      )}\r\n      <button\r\n        className=\"btn-success\"\r\n        style={{\r\n          width: 50,\r\n          fontSize: 16,\r\n          marginLeft: 5,\r\n          marginTop: 5,\r\n          boxShadow: \"none\",\r\n          outline: \"none\",\r\n          borderRadius: \"10px\",\r\n        }}\r\n        onClick={refreshTrending}\r\n      >\r\n        ‚ü≥\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nconst ShowGifs = ({ gifs, currentTerm, isLoading, onScrollEnd, gifSize }) => {\r\n  return (\r\n    gifs && (\r\n      <div className=\"gifs\" id=\"gifs-grid\" style={{ textAlign: \"center\" }}>\r\n        <p id=\"text-sort\" style={{ fontWeight: \"bold\" }}>\r\n          {currentTerm} {gifSize} gifs. scroll to bottom to show more.\r\n        </p>\r\n        <div\r\n          className=\"gifs-view\"\r\n          id=\"gifs-view\"\r\n          style={{\r\n            backgroundColor: \"whitesmoke\",\r\n            overflowY: \"scroll\",\r\n            height: \"450px\",\r\n            textAlign: \"center\",\r\n          }}\r\n          onMouseUp={(e) => onScrollEnd(e)}\r\n        >\r\n          {isLoading ? (\r\n            <div className=\"loader\" style={{ marginTop: 150 }}>\r\n              <Loader />\r\n            </div>\r\n          ) : (\r\n            <div className=\"gifs-inner\">\r\n              {gifs.map(\r\n                (gif) =>\r\n                  gif.embed_url && (\r\n                    <iframe\r\n                      src={gif.embed_url}\r\n                      alt=\"...\"\r\n                      className=\"img-thumbnail\"\r\n                      key={gif.id}\r\n                      style={{\r\n                        width: 350,\r\n                        height: 150,\r\n                        border: \"none\",\r\n                        backgroundColor: \"whitesmoke\",\r\n                      }}\r\n                      title={gif.id}\r\n                    />\r\n                  )\r\n              )}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nexport default ShowGifs;\r\n","import React from \"react\";\r\n\r\nconst SortOptions = ({ filterSelection, handleChange }) => {\r\n  return (\r\n    <div className=\"container\">\r\n      <select value={filterSelection} onChange={handleChange}>\r\n        <option value=\"relevant\">Relevant</option>\r\n        <option value=\"recent\">Recent</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SortOptions;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport SearchBar from \"./components/SearchBar\";\r\nimport ShowGifs from \"./components/ShowGifs\";\r\nimport SortOptions from \"./components/SortOptions\";\r\n\r\n//\r\n//  Deleted FilterSort and SelectOptions\r\n//\r\n\r\n//to make api call to GIPHY API\r\nconst API_KEY = \"CrttO3jUNbjZm6l442VFCXjvB7ZmmNq6\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    gifs: null,\r\n    searchTerm: null,\r\n    currentTerm: null,\r\n    gifSort: null,\r\n    gifFilter: null,\r\n    filterSelection: \"relevant\",\r\n    isLoading: false,\r\n    gifSize: 24,\r\n  };\r\n\r\n  //on component mounting, call API for trending\r\n  // Default page\r\n  componentDidMount = async () => {\r\n    const { gifs, gifSize } = this.state;\r\n    var storage = localStorage.getItem(\"gifs-arr\");\r\n\r\n    this.setState({\r\n      isLoading: true,\r\n    });\r\n\r\n    if (gifs === null) {\r\n      //check localstorage for data and set to state\r\n      if (storage) {\r\n        this.setState({\r\n          gifs: JSON.parse(storage),\r\n          currentTerm: \"trending\",\r\n          isLoading: false,\r\n        });\r\n      } else {\r\n        //if no localstorage, call trend api\r\n        this.refreshTrending(gifSize);\r\n      }\r\n    }\r\n  };\r\n\r\n  refreshTrending = async (size) => {\r\n    this.setState({\r\n      isLoading: true,\r\n    });\r\n    axios\r\n      .get(\r\n        `https://api.giphy.com/v1/gifs/trending?api_key=${API_KEY}&limit=${size}`\r\n      )\r\n      .then(async (res) => {\r\n        //set data to localstorage for quick fast access\r\n        localStorage.setItem(\"gifs-arr\", JSON.stringify(res.data.data));\r\n        this.setState({\r\n          gifs: res.data.data,\r\n          currentTerm: \"trending\",\r\n          isLoading: false,\r\n        });\r\n      });\r\n  };\r\n\r\n  //setSearch term on search type\r\n  setSearchTerm = (event) => {\r\n    this.setState({\r\n      searchTerm: event.target.value,\r\n    });\r\n  };\r\n\r\n  //handleChange changes the filter selected\r\n  handleChange = (event) => {\r\n    const { searchTerm, filterSelection, gifSize } = this.state;\r\n    this.setState({\r\n      filterSelection: event.target.value,\r\n    });\r\n    if (filterSelection)\r\n      return this.onSearchTermSubmit(\r\n        searchTerm,\r\n        filterSelection,\r\n        gifSize > 0 ? gifSize : 24\r\n      );\r\n  };\r\n\r\n  //make the api call with search term on submit\r\n  onSearchTermSubmit = async (searchTerm, filterSelection, size) => {\r\n    this.setState({\r\n      isLoading: true,\r\n    });\r\n    axios\r\n      .get(\r\n        `https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${searchTerm}&sort=${filterSelection}&limit=${size}`\r\n      )\r\n      .then((res) => {\r\n        this.setState({\r\n          gifs: res.data.data,\r\n          currentTerm: searchTerm,\r\n          isLoading: false,\r\n          gifSize: size,\r\n        });\r\n      });\r\n  };\r\n\r\n  //onScroll end, load more gifs\r\n  onScrollEnd = (event) => {\r\n    var { scrollHeight, scrollTop, clientHeight } = event.target;\r\n    var bottom = scrollHeight - scrollTop === clientHeight;\r\n    if (bottom === true) {\r\n      var newSize = this.state.gifSize + 9;\r\n      this.setState({\r\n        gifSize: newSize,\r\n      });\r\n\r\n      if (this.state.searchTerm)\r\n        return this.onSearchTermSubmit(\r\n          this.state.searchTerm,\r\n          this.state.filterSelection,\r\n          newSize\r\n        );\r\n\r\n      return this.refreshTrending(newSize);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      gifs,\r\n      currentTerm,\r\n      searchTerm,\r\n      isLoading,\r\n      gifSize,\r\n      filterSelection,\r\n    } = this.state;\r\n    return (\r\n      <div className=\"container\" id=\"gif-content\">\r\n        <SearchBar\r\n          setSearchTerm={this.setSearchTerm}\r\n          onSearchTermSubmit={this.onSearchTermSubmit}\r\n          refreshTrending={this.refreshTrending}\r\n          handleChange={this.handleChange}\r\n          searchTerm={searchTerm}\r\n          filterSelection={filterSelection}\r\n          gifSize={gifSize}\r\n        />\r\n        <SortOptions\r\n          handleChange={this.handleChange}\r\n          filterSelection={filterSelection}\r\n        />\r\n        {filterSelection !== null && <p>{\"you picked: \" + filterSelection}</p>}\r\n        <ShowGifs\r\n          gifs={gifs}\r\n          currentTerm={currentTerm}\r\n          isLoading={isLoading}\r\n          onScrollEnd={this.onScrollEnd}\r\n          gifSize={gifSize}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}